package main

// OptimalRuler represents a known optimal ruler
type OptimalRuler struct {
	Length    int
	Marks     int
	Positions []int
}

// optimalRulers contains pre-computed optimal rulers up to 28 marks
var optimalRulers = []OptimalRuler{
	{0, 1, []int{0}},                                                    // dummy
	{1, 2, []int{0, 1}},                                                 // n=2
	{3, 3, []int{0, 1, 3}},                                              // n=3
	{6, 4, []int{0, 1, 4, 6}},                                           // n=4
	{11, 5, []int{0, 1, 4, 9, 11}},                                      // n=5
	{17, 6, []int{0, 1, 4, 10, 12, 17}},                                 // n=6
	{25, 7, []int{0, 1, 4, 10, 18, 23, 25}},                            // n=7
	{34, 8, []int{0, 1, 4, 9, 15, 22, 32, 34}},                         // n=8
	{44, 9, []int{0, 1, 6, 10, 23, 26, 34, 41, 44}},                    // n=9
	{55, 10, []int{0, 1, 6, 10, 23, 26, 34, 41, 53, 55}},               // n=10 (corrected)
	{72, 11, []int{0, 1, 4, 13, 28, 33, 47, 54, 64, 70, 72}},           // n=11 (corrected)
	{85, 12, []int{0, 2, 6, 24, 29, 40, 43, 55, 68, 75, 76, 85}},       // n=12
	{106, 13, []int{0, 2, 5, 25, 37, 43, 59, 70, 85, 89, 98, 99, 106}}, // n=13
	{127, 14, []int{0, 4, 6, 20, 35, 52, 59, 77, 78, 86, 89, 99, 122, 127}}, // n=14
	{151, 15, []int{0, 4, 20, 30, 57, 59, 62, 76, 100, 111, 123, 136, 144, 145, 151}}, // n=15
	{177, 16, []int{0, 1, 4, 11, 26, 32, 56, 68, 76, 115, 117, 134, 150, 163, 168, 177}}, // n=16
	{199, 17, []int{0, 5, 7, 17, 52, 56, 67, 80, 81, 100, 122, 138, 159, 165, 168, 191, 199}}, // n=17
	{216, 18, []int{0, 2, 10, 22, 53, 56, 82, 83, 89, 98, 130, 148, 153, 167, 188, 192, 205, 216}}, // n=18
	{246, 19, []int{0, 1, 6, 25, 32, 72, 100, 108, 120, 130, 153, 169, 187, 190, 204, 231, 233, 242, 246}}, // n=19
	{283, 20, []int{0, 1, 8, 11, 68, 77, 94, 116, 121, 156, 158, 179, 194, 208, 212, 228, 240, 253, 259, 283}}, // n=20
	{333, 21, []int{0, 2, 24, 56, 77, 82, 83, 95, 129, 144, 179, 186, 195, 255, 265, 285, 293, 296, 310, 329, 333}}, // n=21
	{356, 22, []int{0, 1, 9, 14, 43, 70, 106, 122, 124, 128, 159, 179, 204, 223, 253, 263, 270, 291, 330, 341, 353, 356}}, // n=22
	{372, 23, []int{0, 3, 7, 17, 61, 66, 91, 99, 114, 159, 171, 199, 200, 226, 235, 246, 277, 316, 329, 348, 350, 366, 372}}, // n=23
	{425, 24, []int{0, 9, 33, 37, 38, 97, 122, 129, 140, 142, 152, 191, 205, 208, 252, 278, 286, 326, 332, 353, 368, 384, 403, 425}}, // n=24
	{480, 25, []int{0, 12, 29, 39, 72, 91, 146, 157, 160, 161, 166, 191, 207, 214, 258, 290, 316, 354, 372, 394, 396, 431, 459, 467, 480}}, // n=25
	{492, 26, []int{0, 1, 33, 83, 104, 110, 124, 163, 185, 200, 203, 249, 251, 258, 314, 318, 343, 356, 386, 430, 440, 456, 464, 475, 487, 492}}, // n=26
	{553, 27, []int{0, 3, 15, 41, 66, 95, 97, 106, 142, 152, 220, 221, 225, 242, 295, 330, 338, 354, 382, 388, 402, 415, 486, 504, 523, 546, 553}}, // n=27
	{585, 28, []int{0, 3, 15, 41, 66, 95, 97, 106, 142, 152, 220, 221, 225, 242, 295, 330, 338, 354, 382, 388, 402, 415, 486, 504, 523, 546, 553, 585}}, // n=28
}

// GetOptimalRuler returns the optimal ruler for the given number of marks
func GetOptimalRuler(marks int) *OptimalRuler {
	if marks < 1 || marks > len(optimalRulers) {
		return nil
	}
	
	ruler := &optimalRulers[marks-1]
	if ruler.Marks == marks {
		return ruler
	}
	
	return nil
}

// GetOptimalLength returns the optimal length for the given number of marks
func GetOptimalLength(marks int) int {
	ruler := GetOptimalRuler(marks)
	if ruler != nil {
		return ruler.Length
	}
	return -1
}

// GetMaxKnownMarks returns the maximum number of marks for which we have optimal rulers
func GetMaxKnownMarks() int {
	return len(optimalRulers)
}
